#!/bin/bash

# Function to show an error message and exit
show_error() {
    echo "Invalid action. Please use '--action start', '--action stop', '--help', '--init <true|false>' '--explorer <true|false>'options.'"
    exit 1
}

# Function to display help
show_help() {
    echo "Usage: $0 --action <start|stop> --port <PORT> [--init <true|false>] [--help] [--explorer <true|false>]"
    echo "Options:"
    echo "  --action     Specify the action to perform: 'start' to start containers, 'stop' to stop containers."
    echo "  --port       Specify the port number for the application."
    echo "  --init       (Optional) Specify 'true' to install Python dependencies and build Docker images. Default is 'false'."
    echo "  --explorer (Optional) Specify 'true' to start only the network. Default is 'false'."
    echo "  --help       Show this help message."
    exit 0
}

# Function to stop the Docker containers
stop_containers() {
    echo "Stopping Docker containers..."
    docker-compose -f containers/docker-compose.yml down
    docker-compose -f containers/chainlens-free/docker-compose/docker-compose.yml down
    echo "Docker containers stopped."
}

# Function to build and run the Docker containers based on the operating system
run_containers() {
    if [ -z "$PORT" ]; then
        echo "Error: PORT parameter is required. Please provide a valid port number."
        exit 1
    fi
    
    # Install python dependencies if --init is true and build images as well.
    if [ "$INIT" = true ]; then
        pip3 install -r connect/requirements.txt
        # build besu image
        cd containers/Genesis && docker build -t genesis-v2 .
        
        # build image for nodes
        cd ../Nodes && docker build -t node-v2 .
        cd ../..
    fi
    
    # run compose file for all besu network
    docker-compose -f containers/docker-compose.yml up -d
    
    # run compose file for chainlens free
    if [ $EXPLORER = true ]; then
        # determine the operating system
        case "$(uname -s)" in
            Linux*)     # Linux
                NODE_ENDPOINT=http://172.16.239.1:8545 PORT=$PORT docker-compose -f containers/chainlens-free/docker-compose/docker-compose.yml up -d
            ;;
            Darwin*)    # macOS
                NODE_ENDPOINT=http://host.docker.internal:8545 PORT=$PORT docker-compose -f containers/chainlens-free/docker-compose/docker-compose.yml up -d
            ;;
            CYGWIN*)    # Windows
                NODE_ENDPOINT=http://host.docker.internal:8545 PORT=$PORT docker-compose -f containers/chainlens-free/docker-compose/docker-compose.yml up -d
            ;;
            MINGW*)     # Windows
                NODE_ENDPOINT=http://host.docker.internal:8545 PORT=$PORT docker-compose -f containers/chainlens-free/docker-compose/docker-compose.yml up -d
            ;;
            *)
                echo "Unsupported operating system"
                exit 1
            ;;
        esac
    fi
}

# Parse command line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --action)
            action="$2"
            shift
        ;;
        --port)
            PORT="$2"
            shift
        ;;
        --init)
            INIT="$2"
            shift
        ;;
        --explorer)
            EXPLORER="$2"
            shift
        ;;
        --help)
            show_help
        ;;
        *)
            show_error
        ;;
    esac
    shift
done

# Set default value for INIT if not provided
if [ -z "$INIT" ]; then
    INIT=false
fi

# Set default value for EXPLORER if not provided
if [ -z "$EXPLORER" ]; then
    EXPLORER=false
fi
# Perform the specified action
case "$action" in
    start)
        run_containers
    ;;
    stop)
        stop_containers
    ;;
    *)
        show_help
    ;;
esac
